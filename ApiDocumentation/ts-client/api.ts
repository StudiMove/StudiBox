/* tslint:disable */
/* eslint-disable */
/**
 * StudyMove API
 * Documentation de l\'API StudyMove
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1AuthLoginPost200Response
 */
export interface ApiV1AuthLoginPost200Response {
    /**
     * Token JWT de l\'utilisateur
     * @type {string}
     * @memberof ApiV1AuthLoginPost200Response
     */
    'token'?: string;
    /**
     * URL de l\'image de profil de l\'utilisateur
     * @type {string}
     * @memberof ApiV1AuthLoginPost200Response
     */
    'profile_image'?: string;
    /**
     * Indicateur de réussite d\'authentification
     * @type {boolean}
     * @memberof ApiV1AuthLoginPost200Response
     */
    'isAuthenticated'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1AuthLoginPost401Response
 */
export interface ApiV1AuthLoginPost401Response {
    /**
     * Raison de l\'échec de l\'authentification
     * @type {string}
     * @memberof ApiV1AuthLoginPost401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthLoginPost500Response
 */
export interface ApiV1AuthLoginPost500Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthLoginPost500Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthLoginPostRequest
 */
export interface ApiV1AuthLoginPostRequest {
    /**
     * Adresse email de l\'utilisateur
     * @type {string}
     * @memberof ApiV1AuthLoginPostRequest
     */
    'email'?: string;
    /**
     * Mot de passe de l\'utilisateur
     * @type {string}
     * @memberof ApiV1AuthLoginPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthRegisterOrganisationPost201Response
 */
export interface ApiV1AuthRegisterOrganisationPost201Response {
    /**
     * ID de l\'utilisateur créé
     * @type {number}
     * @memberof ApiV1AuthRegisterOrganisationPost201Response
     */
    'userId'?: number;
    /**
     * Message de succès
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPost201Response
     */
    'message'?: string;
    /**
     * Indicateur de réussite
     * @type {boolean}
     * @memberof ApiV1AuthRegisterOrganisationPost201Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1AuthRegisterOrganisationPost400Response
 */
export interface ApiV1AuthRegisterOrganisationPost400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPost400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthRegisterOrganisationPost500Response
 */
export interface ApiV1AuthRegisterOrganisationPost500Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPost500Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthRegisterOrganisationPostRequest
 */
export interface ApiV1AuthRegisterOrganisationPostRequest {
    /**
     * Adresse email de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'email'?: string;
    /**
     * Mot de passe de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'password'?: string;
    /**
     * Nom de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'organisationName'?: string;
    /**
     * Adresse de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'address'?: string;
    /**
     * Code postal de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'postalCode'?: string;
    /**
     * Ville de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'city'?: string;
    /**
     * Pays de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'country'?: string;
    /**
     * Numéro de téléphone de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'phone'?: string;
    /**
     * Description de l\'organisation
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'description'?: string;
    /**
     * Type d\'organisation (business, school, association)
     * @type {string}
     * @memberof ApiV1AuthRegisterOrganisationPostRequest
     */
    'organisationType'?: ApiV1AuthRegisterOrganisationPostRequestOrganisationTypeEnum;
}

export const ApiV1AuthRegisterOrganisationPostRequestOrganisationTypeEnum = {
    Business: 'business',
    School: 'school',
    Association: 'association'
} as const;

export type ApiV1AuthRegisterOrganisationPostRequestOrganisationTypeEnum = typeof ApiV1AuthRegisterOrganisationPostRequestOrganisationTypeEnum[keyof typeof ApiV1AuthRegisterOrganisationPostRequestOrganisationTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1PasswordGetResetCodePost200Response
 */
export interface ApiV1PasswordGetResetCodePost200Response {
    /**
     * Indicateur de réussite de la requête
     * @type {boolean}
     * @memberof ApiV1PasswordGetResetCodePost200Response
     */
    'success'?: boolean;
    /**
     * Message de confirmation
     * @type {string}
     * @memberof ApiV1PasswordGetResetCodePost200Response
     */
    'message'?: string;
    /**
     * Le code de réinitialisation pour l\'utilisateur
     * @type {string}
     * @memberof ApiV1PasswordGetResetCodePost200Response
     */
    'reset_code'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordGetResetCodePost400Response
 */
export interface ApiV1PasswordGetResetCodePost400Response {
    /**
     * Message d\'erreur expliquant l\'échec de la requête
     * @type {string}
     * @memberof ApiV1PasswordGetResetCodePost400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordGetResetCodePost500Response
 */
export interface ApiV1PasswordGetResetCodePost500Response {
    /**
     * Message d\'erreur pour une erreur serveur
     * @type {string}
     * @memberof ApiV1PasswordGetResetCodePost500Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordGetResetCodePostRequest
 */
export interface ApiV1PasswordGetResetCodePostRequest {
    /**
     * Adresse email de l\'utilisateur pour lequel récupérer le code de réinitialisation
     * @type {string}
     * @memberof ApiV1PasswordGetResetCodePostRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordRequestResetPost200Response
 */
export interface ApiV1PasswordRequestResetPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordRequestResetPost200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordRequestResetPost200Response
     */
    'message'?: string;
    /**
     * Code de réinitialisation envoyé
     * @type {number}
     * @memberof ApiV1PasswordRequestResetPost200Response
     */
    'reset_code'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordRequestResetPost400Response
 */
export interface ApiV1PasswordRequestResetPost400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordRequestResetPost400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordRequestResetPost500Response
 */
export interface ApiV1PasswordRequestResetPost500Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordRequestResetPost500Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordRequestResetPostRequest
 */
export interface ApiV1PasswordRequestResetPostRequest {
    /**
     * Adresse email de l\'utilisateur
     * @type {string}
     * @memberof ApiV1PasswordRequestResetPostRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordUpdatePut200Response
 */
export interface ApiV1PasswordUpdatePut200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordUpdatePut200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordUpdatePut200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordUpdatePut400Response
 */
export interface ApiV1PasswordUpdatePut400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordUpdatePut400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordUpdatePut500Response
 */
export interface ApiV1PasswordUpdatePut500Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordUpdatePut500Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordUpdatePutRequest
 */
export interface ApiV1PasswordUpdatePutRequest {
    /**
     * Adresse email de l\'utilisateur
     * @type {string}
     * @memberof ApiV1PasswordUpdatePutRequest
     */
    'email'?: string;
    /**
     * Code de réinitialisation envoyé à l\'utilisateur
     * @type {string}
     * @memberof ApiV1PasswordUpdatePutRequest
     */
    'reset_code'?: string;
    /**
     * Nouveau mot de passe
     * @type {string}
     * @memberof ApiV1PasswordUpdatePutRequest
     */
    'new_password'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordVerifyResetCodePost200Response
 */
export interface ApiV1PasswordVerifyResetCodePost200Response {
    /**
     * Indicateur de réussite de la vérification
     * @type {boolean}
     * @memberof ApiV1PasswordVerifyResetCodePost200Response
     */
    'success'?: boolean;
    /**
     * Message indiquant la validité du code de réinitialisation
     * @type {string}
     * @memberof ApiV1PasswordVerifyResetCodePost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordVerifyResetCodePost400Response
 */
export interface ApiV1PasswordVerifyResetCodePost400Response {
    /**
     * Erreur dans la requête ou code de réinitialisation incorrect
     * @type {string}
     * @memberof ApiV1PasswordVerifyResetCodePost400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordVerifyResetCodePost401Response
 */
export interface ApiV1PasswordVerifyResetCodePost401Response {
    /**
     * Message indiquant que le code de réinitialisation a expiré
     * @type {string}
     * @memberof ApiV1PasswordVerifyResetCodePost401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordVerifyResetCodePost404Response
 */
export interface ApiV1PasswordVerifyResetCodePost404Response {
    /**
     * Message indiquant que l\'utilisateur est introuvable
     * @type {string}
     * @memberof ApiV1PasswordVerifyResetCodePost404Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordVerifyResetCodePostRequest
 */
export interface ApiV1PasswordVerifyResetCodePostRequest {
    /**
     * Adresse email de l\'utilisateur
     * @type {string}
     * @memberof ApiV1PasswordVerifyResetCodePostRequest
     */
    'email'?: string;
    /**
     * Code de réinitialisation envoyé à l\'utilisateur
     * @type {number}
     * @memberof ApiV1PasswordVerifyResetCodePostRequest
     */
    'reset_code'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1ProfilOrganisationProfileGet200Response
 */
export interface ApiV1ProfilOrganisationProfileGet200Response {
    /**
     * ID unique de l\'utilisateur
     * @type {number}
     * @memberof ApiV1ProfilOrganisationProfileGet200Response
     */
    'user_id'?: number;
    /**
     * Email de l\'utilisateur
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200Response
     */
    'email'?: string;
    /**
     * Numéro de téléphone de l\'utilisateur
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200Response
     */
    'phone'?: string;
    /**
     * URL de l\'image de profil de l\'utilisateur
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200Response
     */
    'profile_image'?: string;
    /**
     * Liste des rôles de l\'utilisateur
     * @type {Array<string>}
     * @memberof ApiV1ProfilOrganisationProfileGet200Response
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {ApiV1ProfilOrganisationProfileGet200ResponseOrganisation}
     * @memberof ApiV1ProfilOrganisationProfileGet200Response
     */
    'organisation'?: ApiV1ProfilOrganisationProfileGet200ResponseOrganisation;
}
/**
 * Informations sur l\'organisation de l\'utilisateur
 * @export
 * @interface ApiV1ProfilOrganisationProfileGet200ResponseOrganisation
 */
export interface ApiV1ProfilOrganisationProfileGet200ResponseOrganisation {
    /**
     * Nom de l\'organisation
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200ResponseOrganisation
     */
    'name'?: string;
    /**
     * Adresse de l\'organisation
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200ResponseOrganisation
     */
    'address'?: string;
    /**
     * Ville de l\'organisation
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200ResponseOrganisation
     */
    'city'?: string;
    /**
     * Code postal de l\'organisation
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200ResponseOrganisation
     */
    'postcode'?: string;
    /**
     * Pays de l\'organisation
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200ResponseOrganisation
     */
    'country'?: string;
    /**
     * Description de l\'organisation
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet200ResponseOrganisation
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ProfilOrganisationProfileGet401Response
 */
export interface ApiV1ProfilOrganisationProfileGet401Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ProfilOrganisationProfileGet403Response
 */
export interface ApiV1ProfilOrganisationProfileGet403Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ProfilOrganisationProfileGet403Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ProfilUserRoleGet200Response
 */
export interface ApiV1ProfilUserRoleGet200Response {
    /**
     * Rôle de l\'utilisateur
     * @type {string}
     * @memberof ApiV1ProfilUserRoleGet200Response
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ProfilUserRoleGet401Response
 */
export interface ApiV1ProfilUserRoleGet401Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ProfilUserRoleGet401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ProfilUserRoleGet500Response
 */
export interface ApiV1ProfilUserRoleGet500Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ProfilUserRoleGet500Response
     */
    'message'?: string;
}

/**
 * AuthentificationApi - axios parameter creator
 * @export
 */
export const AuthentificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette route permet de connecter un utilisateur en vérifiant son email et son mot de passe. Renvoie un token JWT en cas de succès.
         * @summary Authentifie un utilisateur
         * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost: async (apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthLoginPost', 'apiV1AuthLoginPostRequest', apiV1AuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet de créer un nouvel utilisateur pour une organisation et de lui assigner un rôle.
         * @summary Enregistre une nouvelle organisation
         * @param {ApiV1AuthRegisterOrganisationPostRequest} apiV1AuthRegisterOrganisationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRegisterOrganisationPost: async (apiV1AuthRegisterOrganisationPostRequest: ApiV1AuthRegisterOrganisationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthRegisterOrganisationPostRequest' is not null or undefined
            assertParamExists('apiV1AuthRegisterOrganisationPost', 'apiV1AuthRegisterOrganisationPostRequest', apiV1AuthRegisterOrganisationPostRequest)
            const localVarPath = `/api/v1/auth/register/organisation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthRegisterOrganisationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthentificationApi - functional programming interface
 * @export
 */
export const AuthentificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthentificationApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette route permet de connecter un utilisateur en vérifiant son email et son mot de passe. Renvoie un token JWT en cas de succès.
         * @summary Authentifie un utilisateur
         * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLoginPost(apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(apiV1AuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthentificationApi.apiV1AuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet de créer un nouvel utilisateur pour une organisation et de lui assigner un rôle.
         * @summary Enregistre une nouvelle organisation
         * @param {ApiV1AuthRegisterOrganisationPostRequest} apiV1AuthRegisterOrganisationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthRegisterOrganisationPost(apiV1AuthRegisterOrganisationPostRequest: ApiV1AuthRegisterOrganisationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthRegisterOrganisationPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRegisterOrganisationPost(apiV1AuthRegisterOrganisationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthentificationApi.apiV1AuthRegisterOrganisationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthentificationApi - factory interface
 * @export
 */
export const AuthentificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthentificationApiFp(configuration)
    return {
        /**
         * Cette route permet de connecter un utilisateur en vérifiant son email et son mot de passe. Renvoie un token JWT en cas de succès.
         * @summary Authentifie un utilisateur
         * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost(apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthLoginPost200Response> {
            return localVarFp.apiV1AuthLoginPost(apiV1AuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet de créer un nouvel utilisateur pour une organisation et de lui assigner un rôle.
         * @summary Enregistre une nouvelle organisation
         * @param {ApiV1AuthRegisterOrganisationPostRequest} apiV1AuthRegisterOrganisationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRegisterOrganisationPost(apiV1AuthRegisterOrganisationPostRequest: ApiV1AuthRegisterOrganisationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthRegisterOrganisationPost201Response> {
            return localVarFp.apiV1AuthRegisterOrganisationPost(apiV1AuthRegisterOrganisationPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthentificationApi - object-oriented interface
 * @export
 * @class AuthentificationApi
 * @extends {BaseAPI}
 */
export class AuthentificationApi extends BaseAPI {
    /**
     * Cette route permet de connecter un utilisateur en vérifiant son email et son mot de passe. Renvoie un token JWT en cas de succès.
     * @summary Authentifie un utilisateur
     * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthentificationApi
     */
    public apiV1AuthLoginPost(apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthentificationApiFp(this.configuration).apiV1AuthLoginPost(apiV1AuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet de créer un nouvel utilisateur pour une organisation et de lui assigner un rôle.
     * @summary Enregistre une nouvelle organisation
     * @param {ApiV1AuthRegisterOrganisationPostRequest} apiV1AuthRegisterOrganisationPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthentificationApi
     */
    public apiV1AuthRegisterOrganisationPost(apiV1AuthRegisterOrganisationPostRequest: ApiV1AuthRegisterOrganisationPostRequest, options?: RawAxiosRequestConfig) {
        return AuthentificationApiFp(this.configuration).apiV1AuthRegisterOrganisationPost(apiV1AuthRegisterOrganisationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MotDePasseApi - axios parameter creator
 * @export
 */
export const MotDePasseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Permet de récupérer le code de réinitialisation pour un utilisateur en envoyant l\'email associé.
         * @summary Récupère le code de réinitialisation de mot de passe
         * @param {ApiV1PasswordGetResetCodePostRequest} apiV1PasswordGetResetCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordGetResetCodePost: async (apiV1PasswordGetResetCodePostRequest: ApiV1PasswordGetResetCodePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordGetResetCodePostRequest' is not null or undefined
            assertParamExists('apiV1PasswordGetResetCodePost', 'apiV1PasswordGetResetCodePostRequest', apiV1PasswordGetResetCodePostRequest)
            const localVarPath = `/api/v1/password/get-reset-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordGetResetCodePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Envoie un code de réinitialisation au courriel de l\'utilisateur pour permettre la réinitialisation de mot de passe.
         * @summary Demande de réinitialisation de mot de passe
         * @param {ApiV1PasswordRequestResetPostRequest} apiV1PasswordRequestResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordRequestResetPost: async (apiV1PasswordRequestResetPostRequest: ApiV1PasswordRequestResetPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordRequestResetPostRequest' is not null or undefined
            assertParamExists('apiV1PasswordRequestResetPost', 'apiV1PasswordRequestResetPostRequest', apiV1PasswordRequestResetPostRequest)
            const localVarPath = `/api/v1/password/request-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordRequestResetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Met à jour le mot de passe de l\'utilisateur en utilisant le code de réinitialisation reçu.
         * @summary Mise à jour du mot de passe
         * @param {ApiV1PasswordUpdatePutRequest} apiV1PasswordUpdatePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordUpdatePut: async (apiV1PasswordUpdatePutRequest: ApiV1PasswordUpdatePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordUpdatePutRequest' is not null or undefined
            assertParamExists('apiV1PasswordUpdatePut', 'apiV1PasswordUpdatePutRequest', apiV1PasswordUpdatePutRequest)
            const localVarPath = `/api/v1/password/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordUpdatePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet de vérifier si le code de réinitialisation de mot de passe est valide.
         * @summary Vérifie le code de réinitialisation de mot de passe
         * @param {ApiV1PasswordVerifyResetCodePostRequest} apiV1PasswordVerifyResetCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordVerifyResetCodePost: async (apiV1PasswordVerifyResetCodePostRequest: ApiV1PasswordVerifyResetCodePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordVerifyResetCodePostRequest' is not null or undefined
            assertParamExists('apiV1PasswordVerifyResetCodePost', 'apiV1PasswordVerifyResetCodePostRequest', apiV1PasswordVerifyResetCodePostRequest)
            const localVarPath = `/api/v1/password/verify-reset-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordVerifyResetCodePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MotDePasseApi - functional programming interface
 * @export
 */
export const MotDePasseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MotDePasseApiAxiosParamCreator(configuration)
    return {
        /**
         * Permet de récupérer le code de réinitialisation pour un utilisateur en envoyant l\'email associé.
         * @summary Récupère le code de réinitialisation de mot de passe
         * @param {ApiV1PasswordGetResetCodePostRequest} apiV1PasswordGetResetCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordGetResetCodePost(apiV1PasswordGetResetCodePostRequest: ApiV1PasswordGetResetCodePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordGetResetCodePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordGetResetCodePost(apiV1PasswordGetResetCodePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MotDePasseApi.apiV1PasswordGetResetCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Envoie un code de réinitialisation au courriel de l\'utilisateur pour permettre la réinitialisation de mot de passe.
         * @summary Demande de réinitialisation de mot de passe
         * @param {ApiV1PasswordRequestResetPostRequest} apiV1PasswordRequestResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordRequestResetPost(apiV1PasswordRequestResetPostRequest: ApiV1PasswordRequestResetPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordRequestResetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordRequestResetPost(apiV1PasswordRequestResetPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MotDePasseApi.apiV1PasswordRequestResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Met à jour le mot de passe de l\'utilisateur en utilisant le code de réinitialisation reçu.
         * @summary Mise à jour du mot de passe
         * @param {ApiV1PasswordUpdatePutRequest} apiV1PasswordUpdatePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordUpdatePut(apiV1PasswordUpdatePutRequest: ApiV1PasswordUpdatePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordUpdatePut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordUpdatePut(apiV1PasswordUpdatePutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MotDePasseApi.apiV1PasswordUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet de vérifier si le code de réinitialisation de mot de passe est valide.
         * @summary Vérifie le code de réinitialisation de mot de passe
         * @param {ApiV1PasswordVerifyResetCodePostRequest} apiV1PasswordVerifyResetCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordVerifyResetCodePost(apiV1PasswordVerifyResetCodePostRequest: ApiV1PasswordVerifyResetCodePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordVerifyResetCodePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordVerifyResetCodePost(apiV1PasswordVerifyResetCodePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MotDePasseApi.apiV1PasswordVerifyResetCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MotDePasseApi - factory interface
 * @export
 */
export const MotDePasseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MotDePasseApiFp(configuration)
    return {
        /**
         * Permet de récupérer le code de réinitialisation pour un utilisateur en envoyant l\'email associé.
         * @summary Récupère le code de réinitialisation de mot de passe
         * @param {ApiV1PasswordGetResetCodePostRequest} apiV1PasswordGetResetCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordGetResetCodePost(apiV1PasswordGetResetCodePostRequest: ApiV1PasswordGetResetCodePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordGetResetCodePost200Response> {
            return localVarFp.apiV1PasswordGetResetCodePost(apiV1PasswordGetResetCodePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Envoie un code de réinitialisation au courriel de l\'utilisateur pour permettre la réinitialisation de mot de passe.
         * @summary Demande de réinitialisation de mot de passe
         * @param {ApiV1PasswordRequestResetPostRequest} apiV1PasswordRequestResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordRequestResetPost(apiV1PasswordRequestResetPostRequest: ApiV1PasswordRequestResetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordRequestResetPost200Response> {
            return localVarFp.apiV1PasswordRequestResetPost(apiV1PasswordRequestResetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Met à jour le mot de passe de l\'utilisateur en utilisant le code de réinitialisation reçu.
         * @summary Mise à jour du mot de passe
         * @param {ApiV1PasswordUpdatePutRequest} apiV1PasswordUpdatePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordUpdatePut(apiV1PasswordUpdatePutRequest: ApiV1PasswordUpdatePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordUpdatePut200Response> {
            return localVarFp.apiV1PasswordUpdatePut(apiV1PasswordUpdatePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet de vérifier si le code de réinitialisation de mot de passe est valide.
         * @summary Vérifie le code de réinitialisation de mot de passe
         * @param {ApiV1PasswordVerifyResetCodePostRequest} apiV1PasswordVerifyResetCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordVerifyResetCodePost(apiV1PasswordVerifyResetCodePostRequest: ApiV1PasswordVerifyResetCodePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordVerifyResetCodePost200Response> {
            return localVarFp.apiV1PasswordVerifyResetCodePost(apiV1PasswordVerifyResetCodePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MotDePasseApi - object-oriented interface
 * @export
 * @class MotDePasseApi
 * @extends {BaseAPI}
 */
export class MotDePasseApi extends BaseAPI {
    /**
     * Permet de récupérer le code de réinitialisation pour un utilisateur en envoyant l\'email associé.
     * @summary Récupère le code de réinitialisation de mot de passe
     * @param {ApiV1PasswordGetResetCodePostRequest} apiV1PasswordGetResetCodePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MotDePasseApi
     */
    public apiV1PasswordGetResetCodePost(apiV1PasswordGetResetCodePostRequest: ApiV1PasswordGetResetCodePostRequest, options?: RawAxiosRequestConfig) {
        return MotDePasseApiFp(this.configuration).apiV1PasswordGetResetCodePost(apiV1PasswordGetResetCodePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Envoie un code de réinitialisation au courriel de l\'utilisateur pour permettre la réinitialisation de mot de passe.
     * @summary Demande de réinitialisation de mot de passe
     * @param {ApiV1PasswordRequestResetPostRequest} apiV1PasswordRequestResetPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MotDePasseApi
     */
    public apiV1PasswordRequestResetPost(apiV1PasswordRequestResetPostRequest: ApiV1PasswordRequestResetPostRequest, options?: RawAxiosRequestConfig) {
        return MotDePasseApiFp(this.configuration).apiV1PasswordRequestResetPost(apiV1PasswordRequestResetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Met à jour le mot de passe de l\'utilisateur en utilisant le code de réinitialisation reçu.
     * @summary Mise à jour du mot de passe
     * @param {ApiV1PasswordUpdatePutRequest} apiV1PasswordUpdatePutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MotDePasseApi
     */
    public apiV1PasswordUpdatePut(apiV1PasswordUpdatePutRequest: ApiV1PasswordUpdatePutRequest, options?: RawAxiosRequestConfig) {
        return MotDePasseApiFp(this.configuration).apiV1PasswordUpdatePut(apiV1PasswordUpdatePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet de vérifier si le code de réinitialisation de mot de passe est valide.
     * @summary Vérifie le code de réinitialisation de mot de passe
     * @param {ApiV1PasswordVerifyResetCodePostRequest} apiV1PasswordVerifyResetCodePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MotDePasseApi
     */
    public apiV1PasswordVerifyResetCodePost(apiV1PasswordVerifyResetCodePostRequest: ApiV1PasswordVerifyResetCodePostRequest, options?: RawAxiosRequestConfig) {
        return MotDePasseApiFp(this.configuration).apiV1PasswordVerifyResetCodePost(apiV1PasswordVerifyResetCodePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfilApi - axios parameter creator
 * @export
 */
export const ProfilApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Récupère les informations de profil de l\'utilisateur connecté à partir de son token JWT. Cette route est protégée par des middlewares d\'authentification et de rôle. 
         * @summary Récupère le profil de l\'utilisateur connecté
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilOrganisationProfileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profil/organisation/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet de récupérer le rôle de l\'utilisateur authentifié en fonction de son token JWT.
         * @summary Récupère le rôle de l\'utilisateur
         * @param {string} authorization Token JWT de l\&#39;utilisateur (nécessite le préfixe &#x60;Bearer &#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilUserRoleGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('apiV1ProfilUserRoleGet', 'authorization', authorization)
            const localVarPath = `/api/v1/profil/user/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilApi - functional programming interface
 * @export
 */
export const ProfilApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilApiAxiosParamCreator(configuration)
    return {
        /**
         * Récupère les informations de profil de l\'utilisateur connecté à partir de son token JWT. Cette route est protégée par des middlewares d\'authentification et de rôle. 
         * @summary Récupère le profil de l\'utilisateur connecté
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProfilOrganisationProfileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ProfilOrganisationProfileGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProfilOrganisationProfileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilApi.apiV1ProfilOrganisationProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet de récupérer le rôle de l\'utilisateur authentifié en fonction de son token JWT.
         * @summary Récupère le rôle de l\'utilisateur
         * @param {string} authorization Token JWT de l\&#39;utilisateur (nécessite le préfixe &#x60;Bearer &#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProfilUserRoleGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ProfilUserRoleGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProfilUserRoleGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilApi.apiV1ProfilUserRoleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfilApi - factory interface
 * @export
 */
export const ProfilApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilApiFp(configuration)
    return {
        /**
         * Récupère les informations de profil de l\'utilisateur connecté à partir de son token JWT. Cette route est protégée par des middlewares d\'authentification et de rôle. 
         * @summary Récupère le profil de l\'utilisateur connecté
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilOrganisationProfileGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ProfilOrganisationProfileGet200Response> {
            return localVarFp.apiV1ProfilOrganisationProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet de récupérer le rôle de l\'utilisateur authentifié en fonction de son token JWT.
         * @summary Récupère le rôle de l\'utilisateur
         * @param {string} authorization Token JWT de l\&#39;utilisateur (nécessite le préfixe &#x60;Bearer &#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilUserRoleGet(authorization: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ProfilUserRoleGet200Response> {
            return localVarFp.apiV1ProfilUserRoleGet(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilApi - object-oriented interface
 * @export
 * @class ProfilApi
 * @extends {BaseAPI}
 */
export class ProfilApi extends BaseAPI {
    /**
     * Récupère les informations de profil de l\'utilisateur connecté à partir de son token JWT. Cette route est protégée par des middlewares d\'authentification et de rôle. 
     * @summary Récupère le profil de l\'utilisateur connecté
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilApi
     */
    public apiV1ProfilOrganisationProfileGet(options?: RawAxiosRequestConfig) {
        return ProfilApiFp(this.configuration).apiV1ProfilOrganisationProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet de récupérer le rôle de l\'utilisateur authentifié en fonction de son token JWT.
     * @summary Récupère le rôle de l\'utilisateur
     * @param {string} authorization Token JWT de l\&#39;utilisateur (nécessite le préfixe &#x60;Bearer &#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilApi
     */
    public apiV1ProfilUserRoleGet(authorization: string, options?: RawAxiosRequestConfig) {
        return ProfilApiFp(this.configuration).apiV1ProfilUserRoleGet(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



