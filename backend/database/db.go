package database

import (
	"backend/config"
	"backend/core/models"
	"fmt"
	"log"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

var DB *gorm.DB

// retryConnect tente de se connecter √† la base de donn√©es plusieurs fois avant de retourner une erreur
func retryConnect(dsn string, maxRetries int, retryDelay time.Duration) (*gorm.DB, error) {
	var db *gorm.DB
	var err error
	for i := 0; i < maxRetries; i++ {
		db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{
			Logger: logger.Default.LogMode(logger.Warn),
		})
		if err == nil {
			log.Println("‚úÖ Connexion √† la base de donn√©es r√©ussie.")
			return db, nil
		}
		log.Printf("‚ùå Tentative de connexion √† la base de donn√©es √©chou√©e (%d/%d) : %v", i+1, maxRetries, err)
		time.Sleep(retryDelay)
	}
	return nil, fmt.Errorf("impossible de se connecter √† la base de donn√©es apr√®s %d tentatives: %v", maxRetries, err)
}

// ConnectDatabase √©tablit la connexion avec PostgreSQL
func ConnectDatabase() error {
	// Cr√©er la Data Source Name (DSN) pour la connexion √† la base de donn√©es
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		config.AppConfig.DB.Host,
		config.AppConfig.DB.User,
		config.AppConfig.DB.Password,
		config.AppConfig.DB.Name,
		config.AppConfig.DB.Port)

	log.Println("üîÑ Tentative de connexion √† la base de donn√©es...")

	// Tenter plusieurs connexions √† la base de donn√©es
	db, err := retryConnect(dsn, 5, 5*time.Second) // 5 tentatives avec 5 secondes d'intervalle
	if err != nil {
		return fmt.Errorf("‚ùå Erreur de connexion √† la base de donn√©es : %v", err)
	}

	// Affecter la base de donn√©es globale
	DB = db
	log.Println("‚úÖ Connexion √† la base de donn√©es principale r√©ussie.")

	return nil
}

// Migrate effectue la migration des mod√®les vers la base de donn√©es
func Migrate() error {
	log.Println("üîÑ D√©marrage de la migration des mod√®les...")

	// Migrer les mod√®les d√©finis dans l'application
	err := DB.AutoMigrate(
		&models.User{},
		&models.Role{},
		&models.UserRole{},
		&models.BusinessUser{},
		&models.EducationalInstitution{},
		&models.Association{},
		&models.Event{},
		&models.EventLike{},
		&models.EventView{},
		&models.EventOption{},
		&models.Category{},
		&models.Tag{},
		&models.Ticket{},
		&models.Payment{},
		&models.PaymentTransaction{},
		&models.StudiboxTransaction{},
		&models.SchoolMembership{},
		&models.AssociationMembership{},
		&models.PasswordReset{},
		&models.PointHistory{},
	)
	if err != nil {
		return fmt.Errorf("‚ùå √âchec de la migration des mod√®les : %v", err)
	}

	log.Println("‚úÖ Migration des mod√®les termin√©e avec succ√®s.")
	return nil
}

// InitRoles initialise les r√¥les de base dans la base de donn√©es
func InitRoles(db *gorm.DB) error {
	// Liste des r√¥les √† initialiser
	roles := []models.Role{
		{Name: "Admin"},
		{Name: "User"},
		{Name: "Business"},
	}

	// Initialiser chaque r√¥le s'il n'existe pas d√©j√†
	for _, role := range roles {
		if err := db.FirstOrCreate(&role, models.Role{Name: role.Name}).Error; err != nil {
			return err
		}
		log.Printf("‚úÖ R√¥le '%s' v√©rifi√© ou cr√©√© avec succ√®s.", role.Name)
	}

	log.Println("‚úÖ Initialisation des r√¥les termin√©e avec succ√®s.")
	return nil
}

// InitCategories initialise les cat√©gories de base dans la base de donn√©es
func InitCategories(db *gorm.DB) error {
	categories := []models.Category{
		{Name: "Concert"},
		{Name: "Spectacle"},
		{Name: "Cin√©ma"},
		{Name: "Th√©√¢tre"},
		{Name: "Festival"},
		{Name: "Exposition"},
		{Name: "Parc d'attractions"},
		{Name: "Soir√©e priv√©e"},
		{Name: "Stand-up"},
	}

	for _, category := range categories {
		if err := db.FirstOrCreate(&category, models.Category{Name: category.Name}).Error; err != nil {
			log.Printf("‚ùå Erreur lors de l'initialisation de la cat√©gorie '%s' : %v", category.Name, err)
			return err
		}
		log.Printf("‚úÖ Cat√©gorie '%s' v√©rifi√©e ou cr√©√©e avec succ√®s.", category.Name)
	}

	log.Println("‚úÖ Initialisation de toutes les cat√©gories de divertissement termin√©e avec succ√®s.")
	return nil
}

// InitTags initialise les tags li√©s au divertissement dans la base de donn√©es
func InitTags(db *gorm.DB) error {
	tags := []models.Tag{
		{Name: "En plein air"},
		{Name: "Familial"},
		{Name: "Nocturne"},
		{Name: "Immersif"},
		{Name: "VIP"},
		{Name: "Gratuit"},
		{Name: "Payant"},
		{Name: "Participatif"},
		{Name: "Exclusif"},
		{Name: "Culturel"},
		{Name: "Gastronomique"},
		{Name: "D√©guis√©"},
		{Name: "Artisanat"},
	}

	for _, tag := range tags {
		if err := db.FirstOrCreate(&tag, models.Tag{Name: tag.Name}).Error; err != nil {
			log.Printf("‚ùå Erreur lors de l'initialisation du tag '%s' : %v", tag.Name, err)
			return err
		}
		log.Printf("‚úÖ Tag '%s' v√©rifi√© ou cr√©√© avec succ√®s.", tag.Name)
	}

	log.Println("‚úÖ Initialisation de tous les tags de divertissement termin√©e avec succ√®s.")
	return nil
}
